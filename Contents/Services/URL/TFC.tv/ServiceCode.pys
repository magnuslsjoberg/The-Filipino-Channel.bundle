from TFC_Shared import *

# General
HTTP.Headers['Accept']          = '*/*'
HTTP.Headers['Accept-Encoding'] = 'deflate, gzip'


# TFC URLs
URL_GET_VIDEO_DETAILS = BASE_URL + '/episode/details/{VIDEO_ID}'
URL_GET_VIDEO         = BASE_URL + '/media/fetch'

# TFC id URL patterns 
RE_VIDEO_ID = Regex(r"(?P<url>https?://tfc.tv/(episode|live)/details/(?P<video_id>\d+))(/?.*)")

# ID numbers to fetch the video
#  axios.post('/media/fetch', { eid: 140506, sid: 4512, pv: false })
RE_MEDIA_ID = Regex(r"axios\.post\('/media/fetch', \{ eid: (?P<episode_id>\d+), sid: (?P<show_id>\d+),", Regex.MULTILINE )

# URLs to determine video type
# EPISODE: http://tfc.tv/episode/details/140208/the-good-son-october-20-2017
# MOVIE  : http://tfc.tv/show/details/2988/raketeros
# LIVE   : http://tfc.tv/live/details/41623/anc-live-streaming
# <link rel="canonical" href="http://tfc.tv/live/details/41623/anc-live-streaming" />
RE_TYPE_EPISODE = Regex(r"https?://tfc.tv/episode/.*")
RE_TYPE_MOVIE   = Regex(r"https?://tfc.tv/show/.*")
RE_TYPE_LIVE    = Regex(r"https?://tfc.tv/live/.*")

# Date and duration info
#         Episode 20 of 27 | October 20, 2017 | 32m
#          2017    |   1H 40M
RE_INFO_EPISODE = Regex(r"Episode\s+(?P<index>\d+)\s+of\s+\d+\s+\|\s+(?P<date>[1-2][0-9][0-9][0-9])\s+\|\s+(?P<minutes>[0-5]?[0-9])m")
RE_INFO_MOVIE   = Regex(r"(?P<date>[1-2][0-9][0-9][0-9])\s+\|\s+(?P<hours>[0-9])H (?P<minutes>[0-5][0-9])M")
         
# style="background-image:url(https://timg.tfc.tv/xcms/categoryimages/4046/I-AMERICA-HERO-WEB.jpg);">
RE_MOVIE_BANNER_PATH = Regex(r'background-image:url\((?P<banner_path>[^"]+)\);')

# Regex to extract fingerprint id from cookies
RE_COOKIE_FID = Regex( r"; cc_fingerprintid=(?P<fid>[^;]+);" )

# Regex for parsing m3u8 info
RE_M3U8 = Regex( r"#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=(?P<bandwidth>\d+),RESOLUTION=(?P<width>\d+)x(?P<height>\d+),CODECS=\"(?P<codecs>[^\"]+\")\n(?P<url>https?://\S+)", Regex.MULTILINE )

# Regex for getting URL domain name
RE_DOMAIN = Regex(r"https?://(?P<domain>[^\/]+)")


JSON_HEADERS = dict()
JSON_HEADERS['Accept']           = 'application/json, text/javascript, */*; q=0.01'
JSON_HEADERS['X-Requested-With'] = 'XMLHttpRequest'
JSON_HEADERS['Accept-Language']  = 'en-us'
JSON_HEADERS['Accept-Encoding']  = 'gzip, deflate'
JSON_HEADERS['Content-Type']     = 'application/x-www-form-urlencoded; charset=UTF-8'
JSON_HEADERS['Host']             = 'tfc.tv'
JSON_HEADERS['Origin']           = BASE_URL


####################################################################################################
def NormalizeURL( url ):

    if DEBUG_LEVEL > 3: Log.Debug(DBG( "NormalizeURL, url_in  = '%s'" % (url) ))

    m = RE_VIDEO_ID.match( url )        
    if m:
        url = m.group('url')
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "NormalizeURL, url_out = '%s'" % (url) ))
    
    return url

####################################################################################################
def MetadataObjectForURL( url ):

    if DEBUG_LEVEL > 3: Log.Debug(DBG( "MetadataObjectForURL, url = '%s'" % (url) ))
    
    try:
    
        html = HTML.ElementFromURL( url, cacheTime = CACHE_TIME )

        try:
            info = html.xpath('//div[contains(@class,"hero-image-rating")]/text()')[0]
            info = String.DecodeHTMLEntities( info ).strip()
        except:
            info = None

        try:
            title  = html.xpath('//meta[@property="og:title"]/@content')[0]
            title = String.DecodeHTMLEntities( title ).strip()
        except:
            title = None

        try:
            summary = html.xpath('//meta[@property="og:description"]/@content')[0]
            summary = String.DecodeHTMLEntities( summary ).strip()
        except:
            summary = None

        try:
            image = html.xpath('//meta[@property="og:image"]/@content')[0].strip()
        except:
            image = None

        try:
            banner_path = html.xpath('//div[@class="header-hero-image"]/@style')[0]
            banner = RE_MOVIE_BANNER_PATH.search( banner_path ).group('banner_path')
        except:
            banner = None

        try:
            show = html.xpath('//h1[@class="topic-title-h1"]')[0]
            show = String.DecodeHTMLEntities( show ).strip()
        except:
            show = None
            
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "info     : %s" % (info) ))
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "title    : %s" % (title) ))
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "summary  : %s" % (summary[:50]) ))
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "image    : %s" % (image) ))
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "banner   : %s" % (banner) ))
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "show     : %s" % (show) ))
                    
        canonical_url = html.xpath('//link[@rel="canonical"]/@href')[0]
        if DEBUG_LEVEL > 3: Log.Debug(DBG( "canonical_url : %s" % (canonical_url) ))

        if RE_TYPE_EPISODE.match( canonical_url ):
        
            m = RE_INFO_EPISODE.match( info )
            if m:
                index    = int(m.group('index'))
                date     = Datetime.ParseDate(m.group('date'))
                duration = 60 * 1000 * int(m.group('minutes'))
            else:
                index    = None
                date     = None
                duration = None

            if DEBUG_LEVEL > 3: Log.Debug(DBG( "index    : %s" % (index) ))
            ####if DEBUG_LEVEL > 3: Log.Debug(DBG( "date     : %s" % (date.strftime('%Y-%m-%d')) ))
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "duration : %s" % (duration) ))
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "RETURN EpisodeObject" ))
                     
            return( EpisodeObject(
                             title                   = title,
                             thumb                   = image,
                             source_title            = 'TFC.tv',
                             summary                 = summary,
                             show                    = show,
                             #season                  = season,
                             absolute_index           = index,
                             duration                = duration,
                             originally_available_at = date,
                             art                     = banner
                           ))
                       
        elif RE_TYPE_MOVIE.match( canonical_url ):
        
            m = RE_INFO_MOVIE.match( info )
            if m:
                date     = Datetime.ParseDate(m.group('date'))
                duration = 60 * 1000 * (int(m.group('hours')) + 60 * int(m.group('minutes')))
            else:
                date     = None
                duration = None

            #if DEBUG_LEVEL > 3: Log.Debug(DBG( "date     : %s" % (date.strftime('%Y-%m-%d')) ))
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "duration : %d" % (duration) ))
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "RETURN MovieObject" ))

            return( MovieObject(
                             title                   = title,
                             thumb                   = image,
                             source_title            = 'TFC.tv',
                             summary                 = summary,
                             tagline                 = title,
                             duration                = duration,
                             originally_available_at = date,
                             art                     = banner
                           ))
                                                      
        elif RE_TYPE_LIVE.match( canonical_url ):
    
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "RETURN VideoClipObject" ))

            return( VideoClipObject(
                             title                   = title,
                             thumb                   = image,
                             source_title            = 'TFC.tv',
                             summary                 = summary,
                             #duration                = duration,
                             #originally_available_at = originally_available_at,
                             art                     = banner
                         ))

    except:
        Log.Error(DBG( "MetadataObjectForURL FAILED! url = '%s'" % (url) ))
    
    raise Ex.MediaNotAvailable


####################################################################################################
def MediaObjectsForURL(url):

    if DEBUG_LEVEL > 3: Log.Debug(DBG( "MediaObjectsForURL, url = '%s'" % (url) ))
    return [
		MediaObject(
			parts = [ PartObject(key=HTTPLiveStreamURL(Callback(PlayVideo, url=url)))],
            optimized_for_streaming = True,
            audio_channels          = 2,
            video_resolution        = 720
            )
        ]


####################################################################################################
@indirect
def PlayVideo( url, **kwargs ):

    try:

        if DEBUG_LEVEL > 1: Log.Debug(DBG( "PlayVideo, url = '%s'" % (url) ))

        if DEBUG_LEVEL > 1: Log.Debug(DBG( "Client.Product: '%s', Client.Platform: '%s'" % (Client.Product,Client.Platform) ))

        # Get the m3u8 playlist url
        playlist_url = GetPlaylistURL( url )

        # Remove bandwidth limitation
        playlist_url = playlist_url.replace('&b=100-1000', '')
        playlist_url = playlist_url + '&__b__=5000'

        if DEBUG_LEVEL > 1: Log.Debug(DBG( "playlist_url: %s" % playlist_url ))

        # Read the playlist to get the akamai cookies!
        x = HTTP.Request( playlist_url, cacheTime = 0 )
        # For some extremely weird reason the content needs to be accessed, otherwise the stream will not play!!!
        xx = x.content
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "playlist: %s" % x.content ))

        # Extract and update cookies
        domain  = RE_DOMAIN.search(playlist_url).group('domain')
        cookies = '%s; path=/; domain=%s;' % (HTTP.CookiesForURL(playlist_url), domain)
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "Final cookies for playlist_url: %s" % cookies ))

        return IndirectResponse( VideoClipObject, key = HTTPLiveStreamURL( url = playlist_url ), http_cookies = cookies )

    except:
        Log.Error(DBG( "PlayVideo(%s) FAILED!" % url ))

    raise Ex.MediaNotAvailable


####################################################################################################
def GetPlaylistURL( url ):

    try:
    
        if DEBUG_LEVEL > 1: Log.Debug(DBG( "GetPlaylistURL, url = '%s'" % (url) ))

        # Login
        HTTP.Headers['Cookie'] = Login()
        if DEBUG_LEVEL > 0: Log.Debug(DBG( "HTTP.Headers['Cookie']: '%s'" % (HTTP.Headers['Cookie']) ))
        
        # Get episode/movie details
        source = HTTP.Request( url ).content

        # Extract episode and show id from HTML
        m = RE_MEDIA_ID.search( source )
        try:
            episode_id = m.group('episode_id')
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "episode_id = %s" % (episode_id) ))
        except:
            Log.Error(DBG( "episode_id not found!" ))
            raise
        try:
            show_id = m.group('show_id')
            if DEBUG_LEVEL > 3: Log.Debug(DBG( "show_id = %s" % (show_id) ))
        except:
            Log.Error(DBG( "show_id not found!" ))
            raise

        # Build up POST request to get media info
        JSON_HEADERS['Referer']    = url
        JSON_HEADERS['Cookie']     = HTTP.Headers['Cookie']

        values = {'eid': episode_id, 'sid': show_id, 'pv': 'False' }
        if DEBUG_LEVEL > 2: Log.Debug(DBG( "values: %s" % (values) ))

        json = JSON.ObjectFromURL( URL_GET_VIDEO, values = values, headers = JSON_HEADERS, cacheTime = 0 )

        '''
            {
              "category": {
                "poster": "https://img.tfc.tv/xcms/categoryimages/383/TFCtv-BandilaHEROWEB-1280x7205.jpg",
                "dateaired": "Jul 03, 2006",
                "type": "SHOW",    #   "LIVESTREAM"    "MOVIE"
                "categoryid": "383",
                "name": "Bandila"
              },
              "episode": {
                "dateaired": "Jun 25, 2018",
                "episodeid": "159351"
              },
              "asset": {
                "assetid": "208690",
                "type": "FULL"
              },
              "media": {
                "poster": "https://img.tfc.tv/xcms/categoryimages/383/TFCtv-BandilaHEROWEB-1280x7205.jpg",
                "source": [
                  {
                    "src": "https://o2-i.akamaihd.net/i/bandila/20180625/20180625-bandila-hd-,150000,300000,500000,800000,1000000,1300000,1500000,.mp4.csmil/master.m3u8?hdnea=ip=217.211.72.228~st=1529960905~exp=1529961205~acl=/i/bandila/20180625/20180625-bandila-hd-,150000,300000,500000,800000,1000000,1300000,1500000,.mp4.csmil/*~id=c5c8a385-d366-45b6-914a-5a5cc875298b~data=208690~hmac=30ea5f737512d16653f8f192378ae2a30b0d0ee0832c47d0a5c1e51949e343cd",
                    "type": "application/x-mpegURL"
                  }
                ]
              },
              "mediainfo": {
                "snippet": "None",
                "live": "False",
                "preview": "False",
                "lastposition": "0.0",
                "free": "False"
              },
              "user": {
                "package": "PREMIUM",
                "country": "SE",
                "userid": "c5c8a385-d366-45b6-914a-5a5cc875298b",
                "fingerprint": "8544ebf1754bac3666e648baade9f093",
                "type": "REGISTERED",
                "email": "uB+c1nfF/qf7qRm5+EQUxdaK6fiHUozyaARIFNTHs2I=",
                "ipcountry": "SE"
              },
              "ad": {
                "uri": "//tfc.tv/tfcads.xml?adUri=https%3a%2f%2fpubads.g.doubleclick.net%2fgampad%2fads%3fsz%3d640x480%26iu%3d%2f2744311%2fTFC_VideoPlayer%26impl%3ds%26gdfp_req%3d1%26env%3dvp%26output%3dvast%26unviewed_position_start%3d1%26url%3d%5boUri%5d%26description_url%3d%5bdescriptionUri%5d%26correlator%3d1529960920212%26cust_params%3d&midroll=&cp=ShowName%3dbandila&descUri=https%3a%2f%2ftfc.tv%2fepisode%2fdetails%2f159351%2fbandila-june-25-2018"
              },
              "StatusMessage": "OK",
              "StatusCode": "1"
    }
        '''

        if DEBUG_LEVEL > 2: Log.Debug(DBG( "JSON:  %s" % json ))

        if json['StatusCode'] == 1 and json['StatusMessage'] == 'OK':
            return json['media']['source'][0]['src']
        else:
            Log.Error(DBG( "JSON ERROR %s:%s" % (json['StatusCode'],json['StatusMessage']) ))


    except:
        raise Ex.MediaNotAvailable

    raise Ex.MediaNotAvailable

        
## EOF ##
