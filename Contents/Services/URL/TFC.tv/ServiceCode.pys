from TFC_Shared import *

import json
import os

if 'PLEXTOKEN' in os.environ:
    PLEX_TOKEN = os.environ['PLEXTOKEN']
else:
    PLEX_TOKEN = None
    
    
    
    
# TFC id URL patterns 
RE_VIDEO_ID = Regex(r"(?P<url>https?://tfc.tv/(episode|live)/details/(?P<video_id>\d+))(/?.*)")

# ID numbers to fetch the video
#  axios.post('/media/fetch', { eid: 140506, sid: 4512, pv: false })
RE_MEDIA_ID = Regex(r"axios\.post\('/media/fetch', \{ eid: (?P<episode_id>\d+), sid: (?P<show_id>\d+),", Regex.MULTILINE )

# URLs to determine video type
# EPISODE: http://tfc.tv/episode/details/140208/the-good-son-october-20-2017
# MOVIE  : http://tfc.tv/show/details/2988/raketeros
# LIVE   : http://tfc.tv/live/details/41623/anc-live-streaming
# <link rel="canonical" href="http://tfc.tv/live/details/41623/anc-live-streaming" />
RE_TYPE_EPISODE = Regex(r"https?://tfc.tv/episode/.*")
RE_TYPE_MOVIE   = Regex(r"https?://tfc.tv/show/.*")
RE_TYPE_LIVE    = Regex(r"https?://tfc.tv/live/.*")

# Date and duration info
#         Episode 20 of 27 | October 20, 2017 | 32m
#          2017    |   1H 40M
RE_INFO_EPISODE = Regex(r"Episode\s+(?P<index>\d+)\s+of\s+\d+\s+\|\s+(?P<date>[1-2][0-9][0-9][0-9])\s+\|\s+(?P<minutes>[0-5]?[0-9])m")
RE_INFO_MOVIE   = Regex(r"(?P<date>[1-2][0-9][0-9][0-9])\s+\|\s+(?P<hours>[0-9])H (?P<minutes>[0-5][0-9])M")
         
# style="background-image:url(https://timg.tfc.tv/xcms/categoryimages/4046/I-AMERICA-HERO-WEB.jpg);">
RE_MOVIE_BANNER_PATH = Regex(r'background-image:url\((?P<banner_path>[^"]+)\);')       

    
    
####################################################################################################
def NormalizeURLxxxxxxxx( url ):

    if DEBUG_LEVEL > 0: Log.Debug(DBG( "NormalizeURL, url_in  = '%s'" % (url) ))

    m = RE_VIDEO_ID.match( url )        
    if m:
        url = m.group('url')
        if DEBUG_LEVEL > 0: Log.Debug(DBG( "NormalizeURL, url_out = '%s'" % (url) ))
    
    return url

####################################################################################################
def MetadataObjectForURL( url ):

            return( VideoClipObject(
                             title                   = 'MetadataObjectForURL',
                             source_title            = 'TFC.tv',
                             summary                 = 'url = %s' % url,
                             #duration                = duration,
                             #originally_available_at = originally_available_at,
                         ))



####################################################################################################
def MediaObjectsForURL(url):

    if DEBUG_LEVEL > 0: Log.Debug(DBG( "MediaObjectsForURL, url = '%s'" % (url) ))
    return [
        MediaObject(
            parts = [
                PartObject( key = HTTPLiveStreamURL( Callback( PlayVideo_dummy, url = url )))
            ],
            video_resolution        = '720',
            audio_channels          = 2,
            optimized_for_streaming = True
        )
    ]



####################################################################################################
@indirect
def PlayVideo_dummy( url, **kwargs ):
    # dummy function
    return IndirectResponse( VideoClipObject, key = HTTPLiveStreamURL( url = url ) )
    

## EOF ##
