import json
import time
import urllib


# General
USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.1 Safari/605.1.15'

HTTP.Headers['Accept']          = '*/*'
HTTP.Headers['Accept-Encoding'] = 'br, gzip, deflate'
HTTP.Headers['User-Agent']      = USER_AGENT


# TFC URLs
BASE_URL    = 'https://tfc.tv'


RE_GIGYA_SSO_KEY     = Regex( '"ssoKey":"([a-zA-Z0-9_-]+)",'               )
RE_SSO_LOGIN_UUID    = Regex( 'loginToken \+ .*?\|UUID=([a-z0-9]+)[\'|"];' )


COOKIES = ''
GLOBAL_AUTH_INFO = {}

try:
    DEBUG_LEVEL = int(Prefs['debug_level'])
except:
    DEBUG_LEVEL = 3
        
try:
    CACHE_TIME = int(Prefs['cache_time']) * CACHE_1HOUR
except:
    CACHE_TIME = 0



####################################################################################################
def DBG(message):
    
    return "## TFCTV LOG ## %s ##" % str(message)

    
    
    
####################################################################################################
def DataFromUrl( url, headers = {}, params = None, method = 'GET', immediate = True, jsonParams = False, timeout = 30, cacheTime = 0 ):
    
    #Log.Debug( "### REQUEST HEADERS =\n%s\n###" % json.dumps( headers, indent = 4, sort_keys = True ) )    
    if params:
        if jsonParams:
            params = JSON.StringFromObject(params)
        else:
            params = urllib.urlencode(params)
            params = params.replace('+', '%20')
        #Log.Debug( "#### params = '%s'  ####" % params )

    try:
        if method == 'POST':
            #Log.Debug( "#### DataFromUrl_POST  ####" )
            response = HTTP.Request( url = url, headers = headers, data = params, method = 'POST', immediate = immediate, timeout = timeout, cacheTime = cacheTime )
        else:
            #Log.Debug( "#### DataFromUrl_GET  ####" )
            if params:
                url = "%s?%s" % ( url, params )
            #Log.Debug( "#### url = '%s'  ####" % url )
            response = HTTP.Request( url = url, headers = headers, immediate = immediate, timeout = timeout, cacheTime = cacheTime )
    except:
        Log.Exception( "# Some unknown error! #" )


    try:
        #Log.Debug( response.headers )   
        h = response.headers
 
        #Log.Debug( "### RESPONSE HEADERS =\n%s\n###" % json.dumps( h, indent = 4, sort_keys = True ) )    
    except:
        #Log.Debug( "### RESPONSE HEADERS = '%s' ###" % response.headers )  
        pass  
    
    #Log.Debug("\n\n*****\n%s\n\n*****\n\n" % response.content[:256] )

    return response.content
    
#####################################################################################################
    
def JsonFromUrl_GET( url, headers = {}, params = None ):
    #Log.Debug( "#### JsonFromUrl_GET  ####" )
    #if params: Log.Debug( "#### params = '%s'  ####" % params )
    headers.update( { 'Accept':'application/json, text/plain, */*','Content-type':'application/json'} )
    return ( JSON.ObjectFromString( DataFromUrl( url, headers = headers, params = params, method = 'GET' ) ) )
    
def JsonFromUrl_POST( url, headers = {}, params = None ):
    #Log.Debug( "#### JsonFromUrl_POST  ####" )
    #if params: Log.Debug( "#### params = '%s'  ####" % params )
    headers.update( { 'Accept':'application/json, text/plain, */*','Content-type':'application/json'} )
    return ( JSON.ObjectFromString( DataFromUrl( url, headers = headers, params = params, method = 'POST', jsonParams = True ) ) )

def HtmlFromUrl_GET( url, headers = {}, params = None ):
    #Log.Debug( "#### HtmlFromUrl_GET  ####" )
    #if params: Log.Debug( "#### params = '%s'  ####" % params )
    return DataFromUrl( url, headers = headers, params = params, method = 'GET' )

def HtmlFromUrl_POST( url, headers = {}, params = None ):
    #Log.Debug( "#### HtmlFromUrl_POST  ####" )
    #if params: Log.Debug( "#### params = '%s'  ####" % params )
    headers.update( { 'Content-type':'application/x-www-form-urlencoded'} )
    return DataFromUrl( url, headers = headers, params = params, method = 'POST' )

#####################################################################################################

def Nonce():
    return time.time()

def Context():
    return 'R' + str(Util.RandomInt(10000, 99999)**2)
    
def CookieStringToDict( url, logging = False ):
    if logging: Log.Debug( "CookieStringToDict: url = '%s'", url )
    cookie_dict = {}
    try:
        cookie_string = HTTP.CookiesForURL(url) 
    except:
        cookie_string = ""
    if logging: Log.Debug( "CookieStringToDict: HTTP.CookiesForURL = '%s'" % cookie_string )
    for cookie in cookie_string.split():
        if logging: Log.Debug( "CookieStringToDict: cookie = %s" % cookie )
        (key,value) = cookie.strip(';').split('=',1)
        cookie_dict[key.strip()] = value.strip()
    return cookie_dict

def CookieDictToString( cookie_dict, logging = False ):
    cookie_string = ""
    for (key,value) in cookie_dict.items():
        if logging: Log.Debug( "CookieDictToString: (key,value) = ('%s','%s')" % (key,value) )
        cookie_string = "%s%s=%s; " % (cookie_string,key,value)
    return cookie_string

def LogCookies( cookie_dict ):
    if DEBUG_LEVEL > 4: Log.Debug( "#### cookies =\n%s\n####" % json.dumps( cookie_dict, indent = 4, sort_keys = True ) )



####################################################################################################
def CurrentSessionIsValid():

    global COOKIES
    global GLOBAL_AUTH_INFO
    
    Log.Info( "#### CHECK SESSION INFO ####" )         

    if not 'UID' in GLOBAL_AUTH_INFO:
        Log.Info( "#### 'UID' not in AUTH info ####" )  
        return False       

    try:
        Log.Info( "#### Authenticate at TFC.tv SSO ####" )
        TFC_AUTHENTICATE_URL      = 'https://tfc.tv/sso/authenticate/'
        TFC_AUTHENTICATE_HEADERS  =  {
            'Cookie'  : COOKIES,
            'Referer' : 'https://tfc.tv/'
        }
        TFC_AUTHENTICATE_PARAMS = {
            'u' : GLOBAL_AUTH_INFO[ 'UID'               ],
            's' : GLOBAL_AUTH_INFO[ 'UIDSignature'      ], 
            't' : GLOBAL_AUTH_INFO[ 'signatureTimestamp'],
            'returnUrl' : '/'
        }
        html = HtmlFromUrl_GET( TFC_AUTHENTICATE_URL, headers = TFC_AUTHENTICATE_HEADERS, params = TFC_AUTHENTICATE_PARAMS )
        if "TFC - Error" in html:
            Log.Debug( "#### ERROR! TFC AUTHENTICATE HTML = %s ####" % html )

        if "TFC - Error" not in html:
            CHECK_SESSION_URL      = 'https://tfc.tv/sso/checksession/'    
            CHECK_SESSION_HEADERS  =  {
                'Cookie'  : COOKIES,
                'Referer' : 'https://tfc.tv/'
            }
            CHECK_SESSION_PARAMS = {
                'u' : GLOBAL_AUTH_INFO[ 'UID'               ],
                's' : GLOBAL_AUTH_INFO[ 'UIDSignature'      ], 
                't' : GLOBAL_AUTH_INFO[ 'signatureTimestamp'],
            }
            checkSessionJson = JsonFromUrl_GET( CHECK_SESSION_URL, headers = CHECK_SESSION_HEADERS, params = CHECK_SESSION_PARAMS )
            Log.Debug( "#### CHECK SESSION INFO JSON = \n%s\n ####" % json.dumps( checkSessionJson, indent = 4, sort_keys = True ) )
            if 'StatusCode' in checkSessionJson and checkSessionJson['StatusCode'] == 0:
                Log.Debug( "#### CHECK SESSION INFO OK! ####" )

                return True
                
    except:
        Log.Info( "#### CHECK SESSION INFO FAILED! ####" )
        return False


####################################################################################################
def Logout():

    global COOKIES
    
    try:        
        
        # Need to logout
        Log.Info(DBG( "Logging out..." ))
        
        LOGOUT_URL     = 'https://kapamilya-accounts.abs-cbn.com/api/spa/SSOLogout'
        LOGOUT_HEADERS = {
            'Cookie'  : COOKIES,
            'Origin'  : 'https://kapamilya-accounts.abs-cbn.com',
            'Referer' : 'https://kapamilya-accounts.abs-cbn.com/'
        }
        try:
            ignore = HtmlFromUrl_GET( LOGOUT_URL, headers = LOGOUT_HEADERS )
        except:
            pass
            
        COOKIES = ''
        HTTP.ClearCookies()

    except:
        Log.Error(DBG( "Failed to log out!" ))
        pass
   
   
#####################################################################################################
def Login():    
    
    global COOKIES
    global GLOBAL_AUTH_INFO

    if CurrentSessionIsValid():
        Log.Info( "Already logged in!" ) 
        return COOKIES
      
    try: 
    
        GLOBAL_AUTH_INFO[ 'UID'               ] = ''
        GLOBAL_AUTH_INFO[ 'UIDSignature'      ] = ''
        GLOBAL_AUTH_INFO[ 'signatureTimestamp'] = ''
        
        COOKIES = ''
        HTTP.ClearCookies()
        cookie_dict = {}


        # Log.Info( "####   Get Kapamilya login details ####" )
        try:
            loginID  = Prefs[ 'kapamilya_name' ]
            password = Prefs[ 'password'       ]
        except:
            Log.Error( "#### KAPAMILYA LOGIN DETAILS MISSING IN PREFS! ####" )
            raise Ex.MediaNotAuthorized   

        Log.Info( "LOGIN with our credentials" )
        KAPAMILYA_LOGIN_URL     = 'https://kapamilya-accounts.abs-cbn.com/api/spa/login'
        KAPAMILYA_LOGIN_HEADERS = {
            'Referer'         : 'https://kapamilya-accounts.abs-cbn.com/signin',
            'Host'            : 'kapamilya-accounts.abs-cbn.com',
            'Origin'          : 'https://kapamilya-accounts.abs-cbn.com'
        }
        KAPAMILYA_LOGIN_PARAMS  = { 
            'loginID'  : loginID,
            'password' : password
        }        
        kapamilyaLoginJson = JsonFromUrl_POST( KAPAMILYA_LOGIN_URL, headers = KAPAMILYA_LOGIN_HEADERS, params = KAPAMILYA_LOGIN_PARAMS )
        #Log.Debug( "#### KAPAMILYA LOGIN JSON = \n%s\n ####" % json.dumps( kapamilyaLoginJson, indent = 4, sort_keys = True ) )
        if not 'errorCode' in kapamilyaLoginJson or kapamilyaLoginJson['errorCode'] != 0:
            Log.Error( "#### KAPAMILYA LOGIN JSON FAILED! ####" )
            raise Ex.MediaNotAuthorized 

        cookie_dict.update( CookieStringToDict( KAPAMILYA_LOGIN_URL ) )
        LogCookies( cookie_dict )

        #Log.Info( "#### Get gigyaApiKey and gigyaAuthCode from the 'gac_...' cookie ####" )
        for (key,value) in cookie_dict.items():
            if key.startswith('gac_'):
                gigyaApiKey   = key.replace('gac_','')
                gigyaAuthCode = value
                #Log.Debug( "### FOUND gigyaApiKey   = '%s' ###" % (gigyaApiKey)   )
                #Log.Debug( "### FOUND gigyaAuthCode = '%s' ###" % (gigyaAuthCode) )
        if not gigyaApiKey or not gigyaAuthCode:
            Log.Error( "#### gigyaApiKey or gigyaAuthCode NOT FOUND! ####" )
            raise Ex.MediaNotAuthorized 



        Log.Info( "#### Extract SSO key from GIGYA JavaScript ####" )
        GIGYA_URL     = 'https://cdns.gigya.com/js/gigya.js'
        GIGYA_PARAMS  = { 
            'apikey' : gigyaApiKey, 
            '_'      : Nonce()
        }
        gigyaHtml = HtmlFromUrl_GET( GIGYA_URL, params = GIGYA_PARAMS )
        try:
            ssoKey = RE_GIGYA_SSO_KEY.search(gigyaHtml).group(1)
        except:
            ssoKey = ""

        
        # Get cookies from Gigya account
        Log.Info( "#### Get GIGYA account cookies ####" )
        GIGYA_ACCOUNT_URL     = 'https://accounts.us1.gigya.com/accounts.webSdkBootstrap'
        GIGYA_ACCOUNT_PARAMS  = {
            'apiKey'  : gigyaApiKey, 
            'pageURL' : 'https://kapamilya-accounts.abs-cbn.com/signin', 
            'format'  : 'json', 
            'context' : Context()
        }
        gigyaAccountJson = JsonFromUrl_GET( GIGYA_ACCOUNT_URL, params = GIGYA_ACCOUNT_PARAMS  )
        #Log.Debug( "#### GIGYA ACCOUNT JSON = \n%s\n ####" % json.dumps( gigyaAccountJson, indent = 4, sort_keys = True ) )
        if not 'errorCode' in gigyaAccountJson or gigyaAccountJson['errorCode'] != 0:
            Log.Error( "#### GIGYA ACCOUNT JSON FAILED! ####" )
            raise Ex.MediaNotAuthorized 
         
        cookie_dict.update( CookieStringToDict( GIGYA_ACCOUNT_URL ) )
        LogCookies( cookie_dict )
        

        # Retreive the Gigya login token
        Log.Info( "#### Retreive GIGYA login token ####" )
        GIGYA_LOGIN_URL     = 'https://socialize.us1.gigya.com/socialize.notifyLogin'
        GIGYA_LOGIN_PARAMS  = {
            'sessionExpiration' : -2                                              ,
            'authCode'          : gigyaAuthCode                                   ,
            'APIKey'            : gigyaApiKey                                     ,
            'authMode'          : 'cookie'                                        ,
            'pageURL'           : 'https://kapamilya-accounts.abs-cbn.com/welcome',
            'format'            : 'json'                                          ,
            'context'           : Context()
        }
        gigyaLoginJson = JsonFromUrl_GET( GIGYA_LOGIN_URL, params = GIGYA_LOGIN_PARAMS )
        #Log.Debug( "#### GIGYA LOGIN JSON = \n%s\n ####" % json.dumps( gigyaLoginJson, indent = 4, sort_keys = True ) )
        if not 'errorCode' in gigyaLoginJson or gigyaLoginJson['errorCode'] != 0:
            Log.Error( "#### GIGYA LOGIN JSON FAILED! ####" )
            raise Ex.MediaNotAuthorized 
        if not 'login_token' in gigyaLoginJson:
            Log.Error( "#### GIGYA LOGIN TOKEN NOT FOUND! ####" )
            raise Ex.MediaNotAuthorized 
        gigyaLoginToken = gigyaLoginJson['login_token']

        cookie_dict.update( CookieStringToDict( GIGYA_LOGIN_URL ) )
        LogCookies( cookie_dict )


        # Retrieve UID, UIDSignature and signatureTimestamp from GIGYA account
        Log.Info( "#### Get USER INFO from GIGYA ####" )
        GIGYA_USER_INFO_URL     = 'https://socialize.us1.gigya.com/socialize.getUserInfo'
        GIGYA_USER_INFO_PARAMS = {
            'APIKey'      : gigyaApiKey,
            'login_token' : gigyaLoginToken,
            'authMode'    : 'cookie',
            'pageURL'     : 'https://kapamilya-accounts.abs-cbn.com/welcome',
            'format'      : 'json',
            'context'     : Context()
        }
        gigyaUserInfoJson = JsonFromUrl_GET( GIGYA_USER_INFO_URL, params = GIGYA_USER_INFO_PARAMS )
        #Log.Debug( "#### GIGYA USER INFO JSON = \n%s\n ####" % json.dumps( gigyaUserInfoJson, indent = 4, sort_keys = True ) )
        if not 'errorCode' in gigyaUserInfoJson or gigyaUserInfoJson['errorCode'] != 0:
            Log.Error( "#### GIGYA USER INFO JSON FAILED! ####" )
            raise Ex.MediaNotAvailable 
        if not 'statusCode' in gigyaUserInfoJson or gigyaUserInfoJson['statusCode'] != 200:
            Log.Error( "#### GIGYA USER INFO JSON FAILED! ####" )
            raise Ex.MediaNotAvailable 
        try:    
            # Extract auth info
            gigyaUser_UID                 = str( gigyaUserInfoJson[ 'UID'                ] )
            gigyaUser_UIDSignature        = str( gigyaUserInfoJson[ 'UIDSignature'       ] )
            gigyaUser_signatureTimestamp  = str( gigyaUserInfoJson[ 'signatureTimestamp' ] )

            #Log.Info( "UID                = '%s'" % (gigyaUser_UID)                )
            #Log.Info( "UIDSignature       = '%s'" % (gigyaUser_UIDSignature)       )
            #Log.Info( "signatureTimestamp = '%s'" % (gigyaUser_signatureTimestamp) )
            
        except:
            Log.Error( "#### GIGYA USER INFO DATA MISSING! ####" )
            raise Ex.MediaNotAuthorized 
                   
        cookie_dict.update( CookieStringToDict( GIGYA_USER_INFO_URL ) )
        LogCookies( cookie_dict )

        # Get GMID ticket from GIGYA
        Log.Info( "#### Get GMID ticket from GIGYA ####" )
        GIGYA_GMID_TICKET_URL     = 'https://socialize.us1.gigya.com/socialize.getGmidTicket'     
        GIGYA_GMID_TICKET_PARAMS  = {
            'apiKey'      : gigyaApiKey,
            'expires'     : 3600,
            'pageURL'     : 'https://kapamilya-accounts.abs-cbn.com/welcome',
            'format'      : 'json',
            'context'     : Context()
        }        
        gigyaGmidTicketJson = JsonFromUrl_GET( GIGYA_GMID_TICKET_URL, params = GIGYA_GMID_TICKET_PARAMS )
        #Log.Debug( "#### GIGYA GMID TICKET JSON = \n%s\n ####" % json.dumps( gigyaGmidTicketJson, indent = 4, sort_keys = True ) )
        if not 'errorCode' in gigyaGmidTicketJson or gigyaGmidTicketJson['errorCode'] != 0:
            Log.Error( "#### GIGYA GMID TICKET JSON FAILED! ####" )
            raise Ex.MediaNotAuthorized 
        if not 'statusCode' in gigyaGmidTicketJson or gigyaGmidTicketJson['statusCode'] != 200:
            Log.Error( "#### GIGYA GMID TICKET JSON FAILED! ####" )
            raise Ex.MediaNotAuthorized 

        cookie_dict.update( CookieStringToDict( GIGYA_GMID_TICKET_URL ) )
        LogCookies( cookie_dict )
   

        # Get SSO login UUID from GIGYA SSO gateway
        Log.Info( "#### Connect to GIGYA SSO gateway ####" )
        GIGYA_SSO_GATEWAY_URL = 'https://socialize.us1.gigya.com/gs/SSOGateway.aspx'
               
        # Construct the authorization callback URLs
        AUTHORIZATION_CALLBACK_URL = 'https://kapamilya-accounts.abs-cbn.com/connect/authorize/callback'
        AUTHORIZATION_CALLBACK_PARAMS = {
            'client_id'     : 'tfconline'                    ,
            'redirect_uri'  : 'https://tfc.tv/callback'      ,
            'response_type' : 'id_token token'               ,
            'scope'         : 'openid profile offline_access',
            'nonce'         : Nonce()
        }
        TFC_REDIRECTION_URL = AUTHORIZATION_CALLBACK_URL +'?' + urllib.urlencode(AUTHORIZATION_CALLBACK_PARAMS).replace('+','%20')
        
        GIGYA_SSO_GATEWAY_PARAMS  = {
            'apiKey'            : gigyaApiKey, 
            'gmidTicket'        : gigyaGmidTicketJson['gmidTicket'],
            'loginToken'        : gigyaLoginToken,
            'sessionExpiration' : -2, 
            'redirectURL'       : TFC_REDIRECTION_URL
        }
        
        ssoGatewayHtml = HtmlFromUrl_POST( GIGYA_SSO_GATEWAY_URL, params = GIGYA_SSO_GATEWAY_PARAMS )
        #Log.Debug( "#### GIGYA SSO GATEWAY HTML = %s ####" % ssoGatewayHtml )

        cookie_dict.update( CookieStringToDict( GIGYA_SSO_GATEWAY_URL ) )
        LogCookies( cookie_dict )
     
        try:
            ssoLoginUuid = RE_SSO_LOGIN_UUID.search(ssoGatewayHtml).group(1)
            #Log.Info( "#### SSO LOGIN UUID FOUND: '%s' ####" % ssoLoginUuid )
        except:
            Log.Error( "#### SSO LOGIN UUID NOT FOUND! ####" )
            raise Ex.MediaNotAuthorized 
        
        # Construct cookies 
        cookie_dict[ 'gig_hasGmid'   ] = 'ver2'
        cookie_dict[ 'glt_' + ssoKey ] = gigyaLoginToken + '%7CUUID%3D' + ssoLoginUuid
        LogCookies( cookie_dict )


        # This is the very special callback that will do the actual login!!
        Log.Info( "#### Make the TFC callback call ####" )
        AUTHORIZATION_CALLBACK_HEADERS = {
            'Cookie' : CookieDictToString( cookie_dict )
        }
        try:
            response = HTTP.Request( url = TFC_REDIRECTION_URL, headers = AUTHORIZATION_CALLBACK_HEADERS, immediate = True, follow_redirects = False, cacheTime = 0 )
         
        ###except Ex.RedirectError as e:
        except Exception as e:
        
            #Log.Debug( "#### Exception ####" )
                        
            if ( e.code == 302 ):
                #Log.Debug( "#### RedirectError 302 ####" )
                #Log.Debug( "\n\n#### e.headers =" )
                #Log.Debug( e.headers )
                #Log.Debug( "####\n\n" )

                if e.headers and 'Location' in e.headers:
                    tfcAuthorizationUrl = e.headers['Location']
                    #Log.Info( "#### tfcAuthorizationUrl = '%s' ####" % tfcAuthorizationUrl )
                    callbackHtml = HTTP.Request( tfcAuthorizationUrl, headers = AUTHORIZATION_CALLBACK_HEADERS, immediate = True, cacheTime = 0 ).content
                    #Log.Debug( "#### TFC CALLBACK HTML = %s ####" % callbackHtml )
                    cookie_dict.update( CookieStringToDict( AUTHORIZATION_CALLBACK_URL ) )
                    LogCookies( cookie_dict )
        
        if not tfcAuthorizationUrl:
            raise Ex.MediaNotAuthorized            

        Log.Info( "#### Authenticate at TFC.tv SSO ####" )
        TFC_AUTHENTICATE_URL      = 'https://tfc.tv/sso/authenticate/'    
        TFC_AUTHENTICATE_HEADERS  =  {
            'Cookie'  : CookieDictToString( cookie_dict ),
            'Referer' : 'https://tfc.tv/',
            'Origin'  : tfcAuthorizationUrl
        }
        TFC_AUTHENTICATE_PARAMS = {
            'u' : gigyaUser_UID,
            's' : gigyaUser_UIDSignature, 
            't' : gigyaUser_signatureTimestamp,
            'returnUrl' : '/'
        }
        html = HtmlFromUrl_GET( TFC_AUTHENTICATE_URL, headers = TFC_AUTHENTICATE_HEADERS, params = TFC_AUTHENTICATE_PARAMS )
        cookie_dict.update( CookieStringToDict( TFC_AUTHENTICATE_URL ) )
        LogCookies( cookie_dict )
                    
        if "TFC - Error" in html:
            Log.Debug( "#### TFC AUTHENTICATE HTML = %s ####" % html )
            
            
        if "TFC - Error" not in html:
            CHECK_SESSION_URL      = 'https://tfc.tv/sso/checksession/'    
            CHECK_SESSION_HEADERS  =  {
                'Cookie'  : CookieDictToString( cookie_dict ),
                'Referer' : 'https://tfc.tv/',
                'Origin'  : tfcAuthorizationUrl
            }
            CHECK_SESSION_PARAMS = {
                'u' : gigyaUser_UID,
                's' : gigyaUser_UIDSignature, 
                't' : gigyaUser_signatureTimestamp,
            }
            checkSessionJson = JsonFromUrl_GET( CHECK_SESSION_URL, headers = CHECK_SESSION_HEADERS, params = CHECK_SESSION_PARAMS )
            #Log.Debug( "#### CHECK SESSION INFO JSON = \n%s\n ####" % json.dumps( checkSessionJson, indent = 4, sort_keys = True ) )
            if 'StatusCode' in checkSessionJson and checkSessionJson['StatusCode'] == 0:
                #Log.Debug( "#### CHECK SESSION INFO OK! ####" )

                # Update the auth info
                GLOBAL_AUTH_INFO[ 'UID'                ] = gigyaUser_UID
                GLOBAL_AUTH_INFO[ 'UIDSignature'       ] = gigyaUser_UIDSignature
                GLOBAL_AUTH_INFO[ 'signatureTimestamp' ] = gigyaUser_signatureTimestamp
                COOKIES = CookieDictToString( cookie_dict )
        
                Log.Info( "Successfully logged in." ) 
                return COOKIES

        
    except:
        COOKIES = ''
        Log.Error(DBG( "Failed to log in!" ))
        
    raise Ex.MediaNotAuthorized    

## EOF ##

'''
class MediaNotAvailable(PlexNonCriticalError):
  def __init__(self):
        PlexError.__init__(self, 2001, "This media is not currently available.")

class MediaExpired(PlexNonCriticalError):
  def __init__(self):
        PlexError.__init__(self, 2002, "This media has expired.")

class LiveMediaNotStarted(PlexNonCriticalError):
  def __init__(self):
        PlexError.__init__(self, 2003, "This live media has not yet started.")

class MediaNotAuthorized(PlexNonCriticalError):
  def __init__(self):
        PlexError.__init__(self, 2004, "You are not authorized to access this media.")

class MediaGeoblocked(PlexNonCriticalError):
  def __init__(self):
        PlexError.__init__(self, 2005, "This media is geoblocked and can't be accessed from your current location.")

class StreamLimitExceeded(PlexNonCriticalError):
  def __init__(self):
    PlexError.__init__(self, 2006, "You have reached the limit of streams from this service. Please close one and try again.")

class AttributeTypeMismatch(PlexError):
  def __init__(self, status):
    PlexError.__init__(self, 2101, status)

class ContextException(PlexError):
  def __init__(self, status):
    PlexError.__init__(self, 2102, status)

class APIException(PlexError):
  def __init__(self, status):
    PlexError.__init__(self, 2103, status)

class NonCriticalArgumentException(PlexNonCriticalError):
  def __init__(self, status):
    PlexNonCriticalError.__init__(self, 2104, status)

'''
